package org.metaja;

import org.metaja.template.TemplateAwareClassLoader;
import org.metaja.utils.ClassUtils;
import org.metaja.utils.ResourceUtils;

import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

public class Metaja {

    public static <C> Class<C> load(ClassLoader classLoader, String className, String templateFileName, String templateFileContent, Object[] templateArgs) {
        if (templateFileName != null && !templateFileName.endsWith(".java")) {
            throw new IllegalArgumentException("Template file name should end with '.java'!");
        }
        try {
            TemplateAwareClassLoader templateClassLoader = new TemplateAwareClassLoader(classLoader);
            String[] compiledClasses = templateClassLoader.compile(templateFileName, templateFileContent, templateArgs);
            for (String compiledClass : compiledClasses) {
                if (compiledClass.equals(className)) {
                    return ClassUtils.loadClass(templateClassLoader, className);
                }
            }
            throw new IllegalArgumentException("Can not find class '" + className + "' in code generated by template '" + templateFileName + "'!");

        } catch (ClassUtils.ReflectiveOperationRuntimeException e) {
            throw new IllegalArgumentException("Class '" + className + "' can not be found within template!", e);
        }
    }

    public static <C> Class<C> load(ClassLoader classLoader, String className, String templatePath, Charset cs, Object[] templateArgs) {
        return load(classLoader, className, translateTemplatePathToFilename(templatePath), ResourceUtils.readResource(defaultClassLoader(), templatePath, cs), templateArgs);
    }

    public static <C> Class<C> load(String className, String templateFileName, String templateFileContent, Object[] templateArgs) {
        return load(defaultClassLoader(), className, templateFileName, templateFileContent, templateArgs);
    }

    public static <C> Class<C> load(String className, String template, Object[] templateArgs) {
        return load(defaultClassLoader(), className, null, template, templateArgs);
    }

    public static <C> Class<C> load(String className, String templatePath, Charset cs, Object[] templateArgs) {
        return load(defaultClassLoader(), className, templatePath, cs, templateArgs);
    }

    public static <C> Class<C> load(String className, Charset cs, Object[] templateArgs) {
        return load(className, className.replace('.', '/') + ".java", cs, templateArgs);
    }

    public static <C> Class<C> load(String className, Object[] templateArgs) {
        return load(className, StandardCharsets.UTF_8, templateArgs);
    }

    // ======= private =======

    private Metaja() { }

    private static ClassLoader defaultClassLoader() {
        return ClassLoader.getSystemClassLoader();
    }

    private static String translateTemplatePathToFilename(String path) {
        return path.trim().endsWith(".java") ? path.trim() : path.trim() + ".java";
    }
}
